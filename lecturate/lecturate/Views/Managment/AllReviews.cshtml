@model IEnumerable<lecturate.Models.Review>

@{
    ViewBag.Title = "AllReviews";
}




<div class="pagePlaceWithoutLayout">
    <div class="container">
        <p>
            @Html.ActionLink("הוספת דירוג", "CreateReview")
        </p>
        @using (Html.BeginForm())
        {
            <ul class="filterAdmin">
                <li>
                    שם בית ספר: @Html.TextBox("SearchStringSchool")
                </li>
                <li>
                    שם קורס: @Html.TextBox("searchStringCourse")
                </li>
                <li>
                    שם מרצה: @Html.TextBox("SearchStringLecturer")
                </li>
                <li>
                    <input type="submit" value="חיפוש" />
                </li>
            </ul>
        }



        <span style="font-size: 17px;"> כמות תגובות לפי שנה:  </span>
        @foreach (var item in ViewBag.number)
        {
            <text>@item  </text>
        }

        <br /><br />

        <div id='dashboard'>
        </div>
        <script src="http://d3js.org/d3.v3.min.js"></script>
        <script type="text/javascript">
            function dashboard(id, fData) {




                var barColor = 'steelblue';
                function segColor(c) { return { LecturerReadine: "#807dba", LecturerTransferRate: "#e08214", LecturerAttitude: "#41ab5d", LecturerKnowledge: "#970505" }[c]; }

                // compute total for each state.
                fData.forEach(function (d) { d.total = (d.freq.LecturerReadine + d.freq.LecturerTransferRate + d.freq.LecturerAttitude + d.freq.LecturerKnowledge); });

                // function to handle histogram.
                function histoGram(fD) {
                    var hG = {}, hGDim = { t: 30, r: 0, b: 30, l: 0 };
                    hGDim.w = 200 - hGDim.l - hGDim.r,
                    hGDim.h = 200 - hGDim.t - hGDim.b;

                    //create svg for histogram.
                    var hGsvg = d3.select(id).append("svg")
                        .attr("width", hGDim.w + hGDim.l + hGDim.r)
                        .attr("height", hGDim.h + hGDim.t + hGDim.b).append("g")
                        .attr("transform", "translate(" + hGDim.l + "," + hGDim.t + ")");

                    // create function for x-axis mapping.
                    var x = d3.scale.ordinal().rangeRoundBands([0, hGDim.w], 0.1)
                            .domain(fD.map(function (d) { return d[0]; }));

                    // Add x-axis to the histogram svg.
                    hGsvg.append("g").attr("class", "x axis")
                        .attr("transform", "translate(0," + hGDim.h + ")")
                        .call(d3.svg.axis().scale(x).orient("bottom"));

                    // Create function for y-axis map.
                    var y = d3.scale.linear().range([hGDim.h, 0])
                            .domain([0, d3.max(fD, function (d) { return d[1]; })]);

                    // Create bars for histogram to contain rectangles and freq labels.
                    var bars = hGsvg.selectAll(".bar").data(fD).enter()
                            .append("g").attr("class", "bar");

                    //create the rectangles.
                    bars.append("rect")
                        .attr("x", function (d) { return x(d[0]); })
                        .attr("y", function (d) { return y(d[1]); })
                        .attr("width", x.rangeBand())
                        .attr("height", function (d) { return hGDim.h - y(d[1]); })
                        .attr('fill', barColor)
                        .on("mouseover", mouseover)// mouseover is defined below.
                        .on("mouseout", mouseout);// mouseout is defined below.

                    //Create the frequency labels above the rectangles.
                    bars.append("text").text(function (d) { return d3.format(",")(d[1]) })
                        .attr("x", function (d) { return x(d[0]) + x.rangeBand() / 2; })
                        .attr("y", function (d) { return y(d[1]) - 5; })
                        .attr("text-anchor", "LecturerTransferRatedle");

                    function mouseover(d) {  // utility function to be called on mouseover.
                        // filter for selected state.
                        var st = fData.filter(function (s) { return s.State == d[0]; })[0],
                            nD = d3.keys(st.freq).map(function (s) { return { type: s, freq: st.freq[s] }; });

                        // call update functions of pie-chart and legend.
                        pC.update(nD);
                        leg.update(nD);
                    }

                    function mouseout(d) {    // utility function to be called on mouseout.
                        // reset the pie-chart and legend.
                        pC.update(tF);
                        leg.update(tF);
                    }

                    // create function to update the bars. This will be used by pie-chart.
                    hG.update = function (nD, color) {
                        // update the domain of the y-axis map to reflect change in frequencies.
                        y.domain([0, d3.max(nD, function (d) { return d[1]; })]);

                        // Attach the new data to the bars.
                        var bars = hGsvg.selectAll(".bar").data(nD);

                        // transition the height and color of rectangles.
                        bars.select("rect").transition().duration(500)
                            .attr("y", function (d) { return y(d[1]); })
                            .attr("height", function (d) { return hGDim.h - y(d[1]); })
                            .attr("fill", color);

                        // transition the frequency labels location and change value.
                        bars.select("text").transition().duration(500)
                            .text(function (d) { return d3.format(",")(d[1]) })
                            .attr("y", function (d) { return y(d[1]) - 5; });
                    }
                    return hG;
                }

                // function to handle pieChart.
                function pieChart(pD) {
                    var pC = {}, pieDim = { w: 200, h: 200 };
                    pieDim.r = Math.min(pieDim.w, pieDim.h) / 2;

                    // create svg for pie chart.
                    var piesvg = d3.select(id).append("svg")
                        .attr("width", pieDim.w).attr("height", pieDim.h).append("g")
                        .attr("transform", "translate(" + pieDim.w / 2 + "," + pieDim.h / 2 + ")");

                    // create function to draw the arcs of the pie slices.
                    var arc = d3.svg.arc().outerRadius(pieDim.r - 10).innerRadius(0);

                    // create a function to compute the pie slice angles.
                    var pie = d3.layout.pie().sort(null).value(function (d) { return d.freq; });

                    // Draw the pie slices.
                    piesvg.selectAll("path").data(pie(pD)).enter().append("path").attr("d", arc)
                        .each(function (d) { this._current = d; })
                        .style("fill", function (d) { return segColor(d.data.type); })
                        .on("mouseover", mouseover).on("mouseout", mouseout);

                    // create function to update pie-chart. This will be used by histogram.
                    pC.update = function (nD) {
                        piesvg.selectAll("path").data(pie(nD)).transition().duration(500)
                            .attrTween("d", arcTween);
                    }
                    // Utility function to be called on mouseover a pie slice.
                    function mouseover(d) {
                        // call the update function of histogram with new data.
                        hG.update(fData.map(function (v) {
                            return [v.State, v.freq[d.data.type]];
                        }), segColor(d.data.type));
                    }
                    //Utility function to be called on mouseout a pie slice.
                    function mouseout(d) {
                        // call the update function of histogram with all data.
                        hG.update(fData.map(function (v) {
                            return [v.State, v.total];
                        }), barColor);
                    }
                    // Animating the pie-slice requiring a custom function which specifies
                    // how the intermediate paths should be drawn.
                    function arcTween(a) {
                        var i = d3.interpolate(this._current, a);
                        this._current = i(0);
                        return function (t) { return arc(i(t)); };
                    }
                    return pC;
                }

                // function to handle legend.
                function legend(lD) {
                    var leg = {};

                    // create table for legend.
                    var legend = d3.select(id).append("table").attr('class', 'legend');

                    // create one row per segment.
                    var tr = legend.append("tbody").selectAll("tr").data(lD).enter().append("tr");

                    // create the first column for each segment.
                    tr.append("td").append("svg").attr("width", '16').attr("height", '16').append("rect")
                        .attr("width", '16').attr("height", '16')
                        .attr("fill", function (d) { return segColor(d.type); });

                    // create the second column for each segment.
                    //tr.append("td").text(function (d) { return d.type; });
                    tr.append("td").text(function (d) { if (d.type == "LecturerReadine") return "מוכנות לשיעור"; else if (d.type == "LecturerTransferRate") return "דרך העברת השיעור"; else if (d.type == "LecturerAttitude") return "יחס לסטודנטים"; else if (d.type == "LecturerKnowledge") return "שליטה בחומר"; return d.type; });

                    // create the third column for each segment.
                    tr.append("td").attr("class", 'legendFreq')
                        .text(function (d) { return d3.format(",")(d.freq); });

                    // create the fourth column for each segment.
                    tr.append("td").attr("class", 'legendPerc')
                        .text(function (d) { return getLegend(d, lD); });

                    // Utility function to be used to update the legend.
                    leg.update = function (nD) {
                        // update the data attached to the row elements.
                        var l = legend.select("tbody").selectAll("tr").data(nD);

                        // update the frequencies.
                        l.select(".legendFreq").text(function (d) { return d3.format(",")(d.freq); });

                        // update the percentage column.
                        l.select(".legendPerc").text(function (d) { return getLegend(d, nD); });
                    }

                    function getLegend(d, aD) { // Utility function to compute percentage.
                        return d3.format("%")(d.freq / d3.sum(aD.map(function (v) { return v.freq; })));
                    }

                    return leg;
                }

                // calculate total frequency by segment for all state.
                var tF = ['LecturerTransferRate', 'LecturerKnowledge', 'LecturerAttitude', 'LecturerReadine'].map(function (d) {
                    return { type: d, freq: parseInt(d3.sum(fData.map(function (t) { return t.freq[d]; }))) };
                });

                // calculate total frequency by state for all segment.
                var sF = fData.map(function (d) { return [d.State, d.total]; });

                var hG = histoGram(sF); // create the histogram.
                //pC = pieChart(tF), // create the pie-chart.
                //leg = legend(tF);  // create the legend.
            }





            $.getJSON("http://localhost:59824/Managment/getGraphReviewPerYear", function (data) {
                dashboard('#dashboard', data);

            });

        </script>


<br />

        <table class="table">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.UpVote)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.DownVote)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.LecturerReadine)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.LecturerTransferRate)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.LecturerAttitude)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.LecturerKnowledge)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.StudyingYear)
                </th>

                <th>
                    @Html.DisplayNameFor(model => model.PositiveComment)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.NegativeComment)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.AvgReview)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.DateOfReview)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.InstitutionID)
                </th>
                <th>
                    @Html.ActionLink("שם בית הספר", "AllReviews", new { sortOrder = ViewBag.SchoolNameSortParm })
                </th>
                <th>
                    @Html.ActionLink("שם הקורס", "AllReviews", new { sortOrder = ViewBag.CourseNameSortParm })
                </th>
                <th>
                    @Html.ActionLink("שם המרצה", "AllReviews", new { sortOrder = ViewBag.FirstNameSortParm })
                </th>
                <th>אפשרויות מנהל</th>
            </tr>

            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.UpVote)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.DownVote)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.LecturerReadine)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.LecturerTransferRate)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.LecturerAttitude)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.LecturerKnowledge)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.StudyingYear)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.PositiveComment)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.NegativeComment)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.AvgReview)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.DateOfReview)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.institution.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.school.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.course.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.lecturer.FirstName)
                        @Html.DisplayFor(modelItem => item.lecturer.LastName)
                    </td>
                    <td>
                        @Html.ActionLink("Edit", "EditReview", new { id = item.ReviewID }) |
                        @Html.ActionLink("Details", "DetailsReview", new { id = item.ReviewID }) |
                        @Html.ActionLink("Delete", "DeleteReview", new { id = item.ReviewID })
                    </td>
                </tr>
            }

        </table>

    </div>
</div>
