@model IEnumerable<lecturate.Models.Review>

@{
    ViewBag.Title = "חוות דעת";
}


<div class="pagePlaceWithoutLayout">
    <div class="container">
        @{
            if (!Model.Any())
            {
                <text> לא קיים עדין דירוג על המרצה. על מנת להיות המדרג הראשון, אנא <a href="/Managment/CreateReview"> לחץ כאן</a>. </text>


            }
            else
            {

                int schoolid = 0, lecid = 0, courseid = 0;
                foreach (var item in Model)
                {
                    schoolid = item.school.SchoolID;
                    lecid = item.lecturer.LecturerID;
                    courseid = item.course.CourseID;

                    <ul class="list-inline navigationList">
                        <li class="navigationli">
                            <a href="@Url.Action("InstitutionDetails", "Review", new { InstitutionId = (item.institution.InstitutionID) })">
                                @Html.DisplayFor(modelItem => item.institution.Name)
                            </a> <span class="glyphicon glyphicon-chevron-left"> </span>
                        </li>
                        <li class="navigationli">
                            <a href="@Url.Action("SchoolDetails", "Review", new { SchoolId = (item.school.SchoolID) })">
                                @Html.DisplayFor(modelItem => item.school.Name)
                            </a> <span class="glyphicon glyphicon-chevron-left"> </span>
                        </li>
                        <li class="navigationli">
                            <a href="@Url.Action("CourseDetails", "Review", new { CourseId = (item.course.CourseID) })">
                                @Html.DisplayFor(modelItem => item.course.Name)
                            </a><span class="glyphicon glyphicon-chevron-left"> </span>
                        </li>
                        <li class="navigationli">
                            <a href="@Url.Action("LecturerDetails", "Review", new { LecturerId = (item.lecturer.LecturerID) })">
                                @Html.DisplayFor(modelItem => item.lecturer.FullName)
                            </a>
                        </li>
                    </ul>
                    break;
                }

                <div class="row bottomBeforeComments">
                    <div class="col-sm-5">
                        <table class="table tableReview">
                            <tr>
                                <td class="rightTd">דרך העברת השיעור</td>
                                <td>
                                    @{
                var sum = 0;
                var counter = 0;
                float x = 0;
                foreach (var item in Model)
                {
                    sum = sum + item.LecturerTransferRate;
                    counter++;
                }
                x = ((float)sum) / ((float)counter);
                if (x > 0 && x <= 1.5)
                {
                    <text> <span class="starRating">
                            <label class="noLight">5</label>
                            <label for="rating4" class="noLight">4</label>
                            <label class="noLight" for="rating3">3</label>
                            <label class="noLight" for="rating2">2</label>
                            <label class="light" for="rating1">1</label>
                        </span></text>
                }
                else if (x > 1.5 && x <= 2.5)
                {
                    <text> <span class="starRating">
                            <label class="noLight">5</label>
                            <label for="rating4" class="noLight">4</label>
                            <label class="noLight" for="rating3">3</label>
                            <label class="light" for="rating2">2</label>
                            <label class="light" for="rating1">1</label>
                        </span></text>
                }
                else if (x > 2.5 && x <= 3.5)
                {
                    <text> <span class="starRating">
                            <label class="noLight">5</label>
                            <label for="rating4" class="noLight">4</label>
                            <label class="light" for="rating3">3</label>
                            <label class="light" for="rating2">2</label>
                            <label class="light" for="rating1">1</label>
                        </span></text>
                }
                else if (x > 3.5 && x <= 4.5)
                {
                    <text> <span class="starRating">
                            <label class="noLight">5</label>
                            <label for="rating4" class="light">4</label>
                            <label class="light" for="rating3">3</label>
                            <label class="light" for="rating2">2</label>
                            <label class="light" for="rating1">1</label>
                        </span></text>
                }
                else if (x > 4.5 && x <= 5)
                {
                    <text> <span class="starRating">
                            <label class="light">5</label>
                            <label for="rating4" class="light">4</label>
                            <label class="light" for="rating3">3</label>
                            <label class="light" for="rating2">2</label>
                            <label class="light" for="rating1">1</label>
                        </span></text>
                }
                                    }
                                </td>
                            </tr>
                            <tr>
                                <td class="rightTd">שליטה בחומר</td>
                                <td>
                                    @{
                sum = 0;
                counter = 0;
                foreach (var item in Model)
                {
                    sum += item.LecturerKnowledge;
                    counter++;
                }

                x = ((float)sum) / ((float)counter);
                if (x > 0 && x <= 1.5)
                {
                    <text> <span class="starRating">
                            <label class="noLight">5</label>
                            <label for="rating4" class="noLight">4</label>
                            <label class="noLight" for="rating3">3</label>
                            <label class="noLight" for="rating2">2</label>
                            <label class="light" for="rating1">1</label>
                        </span></text>
                }
                else if (x > 1.5 && x <= 2.5)
                {
                    <text> <span class="starRating">
                            <label class="noLight">5</label>
                            <label for="rating4" class="noLight">4</label>
                            <label class="noLight" for="rating3">3</label>
                            <label class="light" for="rating2">2</label>
                            <label class="light" for="rating1">1</label>
                        </span></text>
                }
                else if (x > 2.5 && x <= 3.5)
                {
                    <text> <span class="starRating">
                            <label class="noLight">5</label>
                            <label for="rating4" class="noLight">4</label>
                            <label class="light" for="rating3">3</label>
                            <label class="light" for="rating2">2</label>
                            <label class="light" for="rating1">1</label>
                        </span></text>
                }
                else if (x > 3.5 && x <= 4.5)
                {
                    <text> <span class="starRating">
                            <label class="noLight">5</label>
                            <label for="rating4" class="light">4</label>
                            <label class="light" for="rating3">3</label>
                            <label class="light" for="rating2">2</label>
                            <label class="light" for="rating1">1</label>
                        </span></text>
                }
                else if (x > 4.5 && x <= 5)
                {
                    <text> <span class="starRating">
                            <label class="light">5</label>
                            <label for="rating4" class="light">4</label>
                            <label class="light" for="rating3">3</label>
                            <label class="light" for="rating2">2</label>
                            <label class="light" for="rating1">1</label>
                        </span></text>
                }

                                }
                            </td>
                        </tr>
                        <tr>
                            <td class="rightTd">יחס לסטודנטים</td>
                            <td>
                                @{
                sum = 0;
                counter = 0;
                foreach (var item in Model)
                {
                    sum += item.LecturerAttitude;
                    counter++;
                }

                x = ((float)sum) / ((float)counter);
                if (x > 0 && x <= 1.5)
                {
                    <text> <span class="starRating">
                            <label class="noLight">5</label>
                            <label for="rating4" class="noLight">4</label>
                            <label class="noLight" for="rating3">3</label>
                            <label class="noLight" for="rating2">2</label>
                            <label class="light" for="rating1">1</label>
                        </span></text>
                }
                else if (x > 1.5 && x <= 2.5)
                {
                    <text> <span class="starRating">
                            <label class="noLight">5</label>
                            <label for="rating4" class="noLight">4</label>
                            <label class="noLight" for="rating3">3</label>
                            <label class="light" for="rating2">2</label>
                            <label class="light" for="rating1">1</label>
                        </span></text>
                }
                else if (x > 2.5 && x <= 3.5)
                {
                    <text> <span class="starRating">
                            <label class="noLight">5</label>
                            <label for="rating4" class="noLight">4</label>
                            <label class="light" for="rating3">3</label>
                            <label class="light" for="rating2">2</label>
                            <label class="light" for="rating1">1</label>
                        </span></text>
                }
                else if (x > 3.5 && x <= 4.5)
                {
                    <text> <span class="starRating">
                            <label class="noLight">5</label>
                            <label for="rating4" class="light">4</label>
                            <label class="light" for="rating3">3</label>
                            <label class="light" for="rating2">2</label>
                            <label class="light" for="rating1">1</label>
                        </span></text>
                }
                else if (x > 4.5 && x <= 5)
                {
                    <text> <span class="starRating">
                            <label class="light">5</label>
                            <label for="rating4" class="light">4</label>
                            <label class="light" for="rating3">3</label>
                            <label class="light" for="rating2">2</label>
                            <label class="light" for="rating1">1</label>
                        </span></text>
                }

                                }
                            </td>
                        </tr>
                        <tr>
                            <td class="rightTd">מוכנות לשיעור</td>
                            <td>
                                @{
                sum = 0;
                counter = 0;
                foreach (var item in Model)
                {
                    sum += item.LecturerReadine;
                    counter++;
                }
                x = ((float)sum) / ((float)counter);
                if (x > 0 && x <= 1.5)
                {
                    <text> <span class="starRating">
                            <label class="noLight">5</label>
                            <label for="rating4" class="noLight">4</label>
                            <label class="noLight" for="rating3">3</label>
                            <label class="noLight" for="rating2">2</label>
                            <label class="light" for="rating1">1</label>
                        </span></text>
                }
                else if (x > 1.5 && x <= 2.5)
                {
                    <text> <span class="starRating">
                            <label class="noLight">5</label>
                            <label for="rating4" class="noLight">4</label>
                            <label class="noLight" for="rating3">3</label>
                            <label class="light" for="rating2">2</label>
                            <label class="light" for="rating1">1</label>
                        </span></text>
                }
                else if (x > 2.5 && x <= 3.5)
                {
                    <text> <span class="starRating">
                            <label class="noLight">5</label>
                            <label for="rating4" class="noLight">4</label>
                            <label class="light" for="rating3">3</label>
                            <label class="light" for="rating2">2</label>
                            <label class="light" for="rating1">1</label>
                        </span></text>
                }
                else if (x > 3.5 && x <= 4.5)
                {
                    <text> <span class="starRating">
                            <label class="noLight">5</label>
                            <label for="rating4" class="light">4</label>
                            <label class="light" for="rating3">3</label>
                            <label class="light" for="rating2">2</label>
                            <label class="light" for="rating1">1</label>
                        </span></text>
                }
                else if (x > 4.5 && x <= 5)
                {
                    <text> <span class="starRating">
                            <label class="light">5</label>
                            <label for="rating4" class="light">4</label>
                            <label class="light" for="rating3">3</label>
                            <label class="light" for="rating2">2</label>
                            <label class="light" for="rating1">1</label>
                        </span></text>
                }
                                }
                            </td>
                        </tr>
                        <tr>
                            <td class="rightTd">
                                @{
                int counterUpVote = 0, counterDownVote = 0;

                foreach (var item in Model)
                {
                    if (item.UpVote)
                    { counterUpVote++; }
                    else if (item.DownVote)
                    { counterDownVote++; }
                }

                int counterAllReviews = counterDownVote + counterUpVote;
                            }
                        </td>
                        <td>
                            <ul style="list-style-type: none; float: right; margin-right: -30px;">
                                <li style="display: inline; margin-left: 20px;"><img src="~/images/like.jpg" /> @counterUpVote</li>
                                <li style="display: inline;"><img src="~/images/unlike.jpg" style="margin-top: 7px;" /> @counterDownVote</li>
                            </ul>
                        </td>
                    </tr>


                </table>
            </div>

            <div id="fb-root"></div>
            <div id="fb-root"></div>
            <script>
                (function (d, s, id) {
                    var js, fjs = d.getElementsByTagName(s)[0];
                    if (d.getElementById(id)) return;
                    js = d.createElement(s); js.id = id;
                    js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.3&appId=628591770609919";
                    fjs.parentNode.insertBefore(js, fjs);
                }(document, 'script', 'facebook-jssdk'));</script>
            <aside>
                <div class="leftGraph">
                    <h3>התפלגות הדירוג הכללי של המרצה ב3 השנים האחרונות:</h3>
                </div>
                <div id='dashboard'>
                </div>
                <script src="http://d3js.org/d3.v3.min.js"></script>
                <script type="text/javascript">
                    function dashboard(id, fData) {




                        var barColor = 'steelblue';
                        function segColor(c) { return { LecturerReadine: "#807dba", LecturerTransferRate: "#e08214", LecturerAttitude: "#41ab5d", LecturerKnowledge: "#970505" }[c]; }

                        // compute total for each state.
                        fData.forEach(function (d) { d.total = (d.freq.LecturerReadine + d.freq.LecturerTransferRate + d.freq.LecturerAttitude + d.freq.LecturerKnowledge) / 4; });

                        // function to handle histogram.
                        function histoGram(fD) {
                            var hG = {}, hGDim = { t: 30, r: 0, b: 30, l: 0 };
                            hGDim.w = 200 - hGDim.l - hGDim.r,
                            hGDim.h = 200 - hGDim.t - hGDim.b;

                            //create svg for histogram.
                            var hGsvg = d3.select(id).append("svg")
                                .attr("width", hGDim.w + hGDim.l + hGDim.r)
                                .attr("height", hGDim.h + hGDim.t + hGDim.b).append("g")
                                .attr("transform", "translate(" + hGDim.l + "," + hGDim.t + ")");

                            // create function for x-axis mapping.
                            var x = d3.scale.ordinal().rangeRoundBands([0, hGDim.w], 0.1)
                                    .domain(fD.map(function (d) { return d[0]; }));

                            // Add x-axis to the histogram svg.
                            hGsvg.append("g").attr("class", "x axis")
                                .attr("transform", "translate(0," + hGDim.h + ")")
                                .call(d3.svg.axis().scale(x).orient("bottom"));

                            // Create function for y-axis map.
                            var y = d3.scale.linear().range([hGDim.h, 0])
                                    .domain([0, d3.max(fD, function (d) { return d[1]; })]);

                            // Create bars for histogram to contain rectangles and freq labels.
                            var bars = hGsvg.selectAll(".bar").data(fD).enter()
                                    .append("g").attr("class", "bar");

                            //create the rectangles.
                            bars.append("rect")
                                .attr("x", function (d) { return x(d[0]); })
                                .attr("y", function (d) { return y(d[1]); })
                                .attr("width", x.rangeBand())
                                .attr("height", function (d) { return hGDim.h - y(d[1]); })
                                .attr('fill', barColor)
                                .on("mouseover", mouseover)// mouseover is defined below.
                                .on("mouseout", mouseout);// mouseout is defined below.

                            //Create the frequency labels above the rectangles.
                            bars.append("text").text(function (d) { return d3.format(",")(d[1]) })
                                .attr("x", function (d) { return x(d[0]) + x.rangeBand() / 2; })
                                .attr("y", function (d) { return y(d[1]) - 5; })
                                .attr("text-anchor", "LecturerTransferRatedle");

                            function mouseover(d) {  // utility function to be called on mouseover.
                                // filter for selected state.
                                var st = fData.filter(function (s) { return s.State == d[0]; })[0],
                                    nD = d3.keys(st.freq).map(function (s) { return { type: s, freq: st.freq[s] }; });

                                // call update functions of pie-chart and legend.
                                pC.update(nD);
                                leg.update(nD);
                            }

                            function mouseout(d) {    // utility function to be called on mouseout.
                                // reset the pie-chart and legend.
                                pC.update(tF);
                                leg.update(tF);
                            }

                            // create function to update the bars. This will be used by pie-chart.
                            hG.update = function (nD, color) {
                                // update the domain of the y-axis map to reflect change in frequencies.
                                y.domain([0, d3.max(nD, function (d) { return d[1]; })]);

                                // Attach the new data to the bars.
                                var bars = hGsvg.selectAll(".bar").data(nD);

                                // transition the height and color of rectangles.
                                bars.select("rect").transition().duration(500)
                                    .attr("y", function (d) { return y(d[1]); })
                                    .attr("height", function (d) { return hGDim.h - y(d[1]); })
                                    .attr("fill", color);

                                // transition the frequency labels location and change value.
                                bars.select("text").transition().duration(500)
                                    .text(function (d) { return d3.format(",")(d[1]) })
                                    .attr("y", function (d) { return y(d[1]) - 5; });
                            }
                            return hG;
                        }

                        // function to handle pieChart.
                        function pieChart(pD) {
                            var pC = {}, pieDim = { w: 200, h: 200 };
                            pieDim.r = Math.min(pieDim.w, pieDim.h) / 2;

                            // create svg for pie chart.
                            var piesvg = d3.select(id).append("svg")
                                .attr("width", pieDim.w).attr("height", pieDim.h).append("g")
                                .attr("transform", "translate(" + pieDim.w / 2 + "," + pieDim.h / 2 + ")");

                            // create function to draw the arcs of the pie slices.
                            var arc = d3.svg.arc().outerRadius(pieDim.r - 10).innerRadius(0);

                            // create a function to compute the pie slice angles.
                            var pie = d3.layout.pie().sort(null).value(function (d) { return d.freq; });

                            // Draw the pie slices.
                            piesvg.selectAll("path").data(pie(pD)).enter().append("path").attr("d", arc)
                                .each(function (d) { this._current = d; })
                                .style("fill", function (d) { return segColor(d.data.type); })
                                .on("mouseover", mouseover).on("mouseout", mouseout);

                            // create function to update pie-chart. This will be used by histogram.
                            pC.update = function (nD) {
                                piesvg.selectAll("path").data(pie(nD)).transition().duration(500)
                                    .attrTween("d", arcTween);
                            }
                            // Utility function to be called on mouseover a pie slice.
                            function mouseover(d) {
                                // call the update function of histogram with new data.
                                hG.update(fData.map(function (v) {
                                    return [v.State, v.freq[d.data.type]];
                                }), segColor(d.data.type));
                            }
                            //Utility function to be called on mouseout a pie slice.
                            function mouseout(d) {
                                // call the update function of histogram with all data.
                                hG.update(fData.map(function (v) {
                                    return [v.State, v.total];
                                }), barColor);
                            }
                            // Animating the pie-slice requiring a custom function which specifies
                            // how the intermediate paths should be drawn.
                            function arcTween(a) {
                                var i = d3.interpolate(this._current, a);
                                this._current = i(0);
                                return function (t) { return arc(i(t)); };
                            }
                            return pC;
                        }

                        // function to handle legend.
                        function legend(lD) {
                            var leg = {};

                            // create table for legend.
                            var legend = d3.select(id).append("table").attr('class', 'legend');

                            // create one row per segment.
                            var tr = legend.append("tbody").selectAll("tr").data(lD).enter().append("tr");

                            // create the first column for each segment.
                            tr.append("td").append("svg").attr("width", '16').attr("height", '16').append("rect")
                                .attr("width", '16').attr("height", '16')
                                .attr("fill", function (d) { return segColor(d.type); });

                            // create the second column for each segment.
                            //tr.append("td").text(function (d) { return d.type; });
                            tr.append("td").text(function (d) { if (d.type == "LecturerReadine") return "מוכנות לשיעור"; else if (d.type == "LecturerTransferRate") return "דרך העברת השיעור"; else if (d.type == "LecturerAttitude") return "יחס לסטודנטים"; else if (d.type == "LecturerKnowledge") return "שליטה בחומר"; return d.type; });

                            // create the third column for each segment.
                            tr.append("td").attr("class", 'legendFreq')
                                .text(function (d) { return d3.format(",")(d.freq); });

                            // create the fourth column for each segment.
                            tr.append("td").attr("class", 'legendPerc')
                                .text(function (d) { return getLegend(d, lD); });

                            // Utility function to be used to update the legend.
                            leg.update = function (nD) {
                                // update the data attached to the row elements.
                                var l = legend.select("tbody").selectAll("tr").data(nD);

                                // update the frequencies.
                                l.select(".legendFreq").text(function (d) { return d3.format(",")(d.freq); });

                                // update the percentage column.
                                l.select(".legendPerc").text(function (d) { return getLegend(d, nD); });
                            }

                            function getLegend(d, aD) { // Utility function to compute percentage.
                                return d3.format("%")(d.freq / d3.sum(aD.map(function (v) { return v.freq; })));
                            }

                            return leg;
                        }

                        // calculate total frequency by segment for all state.
                        var tF = ['LecturerTransferRate', 'LecturerKnowledge', 'LecturerAttitude', 'LecturerReadine'].map(function (d) {
                            if ('@counterAllReviews' == 1)
                                return { type: d, freq: parseInt(d3.sum(fData.map(function (t) { return t.freq[d]; }))) };
                            else if ('@counterAllReviews' == 2)
                                return { type: d, freq: parseInt(d3.sum(fData.map(function (t) { return t.freq[d]; })) / 2.0) };
                            else if ('@counterAllReviews' >= 3)
                                return { type: d, freq: parseInt(d3.sum(fData.map(function (t) { return t.freq[d]; })) / 3.0) };
                        });

                        // calculate total frequency by state for all segment.
                        var sF = fData.map(function (d) { return [d.State, d.total]; });

                        var hG = histoGram(sF), // create the histogram.
                            pC = pieChart(tF), // create the pie-chart.
                            leg = legend(tF);  // create the legend.
                    }





                    $.getJSON("Review/GetAvgsForGraph", { SchoolID: '@schoolid', LecturerID: '@lecid', CourseID: '@courseid' }, function (data) {
                        dashboard('#dashboard', data);

                    });

                </script>

            </aside>

        </div>

        <div class="fb-share-button" data-href="http://localhost:59824" data-layout="button"></div>



                // if user is log in >> Comments Availables only for logged in users!
                if (Request.IsAuthenticated)
                {
                    foreach (var item in Model)
                    {
                        <div class="addIcon">
                            <div id="sidebar">
                                <a href="@Url.Action("CreateReviewForSpesipicLecturer", "Review", new { SchoolID = (item.school.SchoolID), CourseID = (item.course.CourseID), LecturerID = (item.lecturer.LecturerID) })">
                                    <img src="@Url.Content("../images/addReview.png")" />
                                </a>
                            </div>
                        </div>

                        break;
                    }
                    foreach (var item in Model)
                    {

                        <article class="col-lg-12">
                            <div class="col-sm-3">
                                <table class="table table-bordered">
                                    <tbody>
                                        <tr>
                                            <td>דרך העברת השיעור</td>
                                            <td>@Html.DisplayFor(modelItem => item.LecturerTransferRate)</td>
                                        </tr>
                                        <tr>
                                            <td>שליטה בחומר</td>
                                            <td>@Html.DisplayFor(modelItem => item.LecturerKnowledge)</td>
                                        </tr>
                                        <tr>
                                            <td>יחס לסטודנטים</td>
                                            <td>@Html.DisplayFor(modelItem => item.LecturerAttitude)</td>
                                        </tr>
                                        <tr>
                                            <td> מוכנות לשיעור</td>
                                            <td>@Html.DisplayFor(modelItem => item.LecturerReadine)</td>
                                        </tr>
                                    </tbody>
                                </table>


                            </div>
                            <div class="col-sm-9">
                                <div class="reviewDate">נכתב בתאריך @Html.DisplayFor(modelItem => item.DateOfReview.Day)<text>/</text>@Html.DisplayFor(modelItem => item.DateOfReview.Month)<text>/</text>@Html.DisplayFor(modelItem => item.DateOfReview.Year)<text>. למדתי בקורס בשנת @Html.DisplayFor(modelItem => item.StudyingYear)</text></div>
                                <div class="positiveReview">
                                    <span> תגובה חיובית:</span> <br />
                                    @Html.DisplayFor(modelItem => item.PositiveComment)
                                </div>
                                <div class="negativeReview">
                                    <span> תגובה שלילית:</span> <br />
                                    @Html.DisplayFor(modelItem => item.NegativeComment)
                                </div>
                            </div>
                        </article>

                    }
                }
                else // please sign in if you want to see the comments..
                {
                    <p>
                        על מנת לצפות בתגובות עלייך <a href="/Account/Register">להרשם</a> או  <a href="/Account/Login">להתחבר</a>
                    </p>
                }
            }







        }
    </div>
</div>





<script type="text/javascript">
    $(function () {
        var offset = $("#sidebar").offset();
        var topPadding = 150;
        $(window).scroll(function () {
            if ($(window).scrollTop() > offset.top) {
                $("#sidebar").stop().animate({
                    marginTop: $(window).scrollTop() - offset.top + topPadding
                });
            } else {
                $("#sidebar").stop().animate({
                    marginTop: 0
                });
            }
        });
    });
</script>
